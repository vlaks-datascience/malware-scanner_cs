using System;
using System.Collections.Generic;
using System.IdentityModel.Policy;
using System.Linq;
using System.Security.Cryptography.X509Certificates;
using System.Security.Principal;
using System.ServiceModel;
using System.ServiceModel.Description;
using System.ServiceModel.Security;
using System.Text;
using System.Threading.Tasks;
using Contracts;
using SecurityManager;

namespace Service
{
    public class Program
    {
        static void Main(string[] args)
        {
            string srvCertCN = FormatterForCert.ParseNameForCert(WindowsIdentity.GetCurrent().Name);

            //string address = "net.tcp://192.168.81.170:9999/IDS";
            string address = "net.tcp://localhost:9999/IDS";
            //string address2 = "net.tcp://192.168.81.170:9998/IDS";
            string address2 = "net.tcp://localhost:9998/IDS";
            

            NetTcpBinding binding = new NetTcpBinding();

            binding.Security.Transport.ClientCredentialType = TcpClientCredentialType.Certificate;

            ServiceHost host = new ServiceHost(typeof(Service));
            host.AddServiceEndpoint(typeof(IService), binding, address);

            ///Custom validation mode enables creation of a custom validator - CustomCertificateValidator
            host.Credentials.ClientCertificate.Authentication.CertificateValidationMode = X509CertificateValidationMode.Custom;
            host.Credentials.ClientCertificate.Authentication.CustomCertificateValidator = new ServiceCertValidator();

            ///If CA doesn't have a CRL associated, WCF blocks every client because it cannot be validated
            host.Credentials.ClientCertificate.Authentication.RevocationMode = X509RevocationMode.NoCheck;

            ///Set appropriate service's certificate on the host. Use CertManager class to obtain the certificate based on the "srvCertCN"
            host.Credentials.ServiceCertificate.Certificate = CertManager.GetCertificateFromStorage(StoreName.My, StoreLocation.LocalMachine, srvCertCN);

            ServiceSecurityAuditBehavior newAuditBehavior = new ServiceSecurityAuditBehavior();
            
            newAuditBehavior.AuditLogLocation = AuditLogLocation.Application;
            newAuditBehavior.ServiceAuthorizationAuditLevel = AuditLevel.SuccessOrFailure;

            host.Description.Behaviors.Remove<ServiceSecurityAuditBehavior>();
            host.Description.Behaviors.Add(newAuditBehavior);

            try 
            {
                host.Open();
            } 
            catch (Exception e)
            {
                Console.WriteLine(e);
                Console.ReadLine();
            }
            NetTcpBinding binding2 = new NetTcpBinding();
            ServiceHost host2 = new ServiceHost(typeof(Service2));
            host2.AddServiceEndpoint(typeof(IMallware), binding2, address2);

            

            host2.Authorization.ServiceAuthorizationManager = new CustomAuthorizationManager();
            host2.Authorization.PrincipalPermissionMode = System.ServiceModel.Description.PrincipalPermissionMode.Custom;
            List<IAuthorizationPolicy> policies = new List<IAuthorizationPolicy>();
            policies.Add(new CustomAuthorizationPolicy());
            host2.Authorization.ExternalAuthorizationPolicies = policies.AsReadOnly();
            host2.Open();

            Console.WriteLine("Intrusion Detection System has started!");
            Console.WriteLine("Waiting for Malware Scanner to connect...");

            Console.ReadKey();

            host.Close();
            host2.Close();
        }
    }
}
