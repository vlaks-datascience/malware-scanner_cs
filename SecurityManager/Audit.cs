using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SecurityManager
{
	public class Audit : IDisposable
	{

		private static EventLog customLog = null;
		const string SourceName = "SecurityManager.Audit";
		const string LogName = "MySecTest";

		static Audit()
		{
			try
			{
				/// create customLog handle
				if (!EventLog.SourceExists(SourceName))
				{
					EventLog.CreateEventSource(SourceName, LogName);
				}
				customLog = new EventLog(LogName, Environment.MachineName, SourceName);
			}
			catch (Exception e)
			{
				customLog = null;
				Console.WriteLine("Error while trying to create log handle. Error = {0}", e.Message);
			}
		}

		public static void AuthenticationSuccess(string userName)
		{
			//TO DO
			// string UserAuthenticationSuccess -> read string format from .resx file
			if (customLog != null)
			{
				// string message -> create message based on UserAuthenticationSuccess and params
				// write message in customLog, EventLogEntryType is Information or SuccessAudit 
				string authSuccess = AuditEvents.UserAuthenticationSuccess;
				string message = string.Format(authSuccess, userName);
				customLog.WriteEntry(message);
			}
			else
			{
				throw new ArgumentException(string.Format("Error while trying to write event (eventid = {0}) to event log.", (int)AuditEventTypes.AuthenticationSuccess));
			}
		}

		public static void AuthorizationSuccess(string userName, string serviceName)
		{
			//TO DO
			if (customLog != null)
			{
				// string message -> create message based on UserAuthenticationSuccess and params
				// write message in customLog, EventLogEntryType is Information or SuccessAudit 
				string autzSuccess = AuditEvents.UserAuthorizationSuccess;
				string message = string.Format(autzSuccess, userName, serviceName);
				customLog.WriteEntry(message);
			}
			else
			{
				throw new ArgumentException(string.Format("Error while trying to write event (eventid = {0}) to event log.", (int)AuditEventTypes.AuthorizationSuccess));
			}

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userName"></param>
		/// <param name="serviceName"> should be read from the OperationContext as follows: OperationContext.Current.IncomingMessageHeaders.Action</param>
		/// <param name="reason">permission name</param>
		public static void AuthorizationFailed(string userName, string serviceName, string reason)
		{
			//TO DO
			if (customLog != null)
			{
				// string message -> create message based on UserAuthenticationSuccess and params
				// write message in customLog, EventLogEntryType is Information or SuccessAudit 
				string autzFailed = AuditEvents.UserAuthorizationFailed;
				string message = string.Format(autzFailed, userName, serviceName, reason);
				customLog.WriteEntry(message);
			}
			else
			{
				throw new ArgumentException(string.Format("Error while trying to write event (eventid = {0}) to event log.", (int)AuditEventTypes.AuthorizationFailed));
			}
		}

		// Mozda koristimo mozda ne
		/*
		public static void ProcessInformation(string processName, DateTime dt)
        {
			if(customLog != null)
            {
				string processInfo = AuditEvents.AuditInformation;
				string message = string.Format(processInfo, processName, dt);
				customLog.WriteEntry(message);
            }
			else
            {
				throw new ArgumentException(string.Format("Error while trying to write event (eventid = {0}) to event log.", (int)CriticalLevel.ProcessInformation));
			}
		}

		public static void ProcessWarning(string processName, DateTime dt)
		{
			if (customLog != null)
			{
				string processInfo = AuditEvents.AuditWarning;
				string message = string.Format(processInfo, processName, dt);
				customLog.WriteEntry(message);
			}
			else
			{
				throw new ArgumentException(string.Format("Error while trying to write event (eventid = {0}) to event log.", (int)CriticalLevel.ProcessWarning));
			}
		}
		*/

		public static void ProcessCritical(string processName, DateTime dt, int n)
		{
			if (customLog != null)
			{
				string processInfo = AuditEvents.AuditCritical;
				string message = string.Format(processInfo, processName, dt, n);
				customLog.WriteEntry(message);
			}
			else
			{
				throw new ArgumentException(string.Format("Error while trying to write event (eventid = {0}) to event log.", (int)CriticalLevel.ProcessCritical));
			}
		}

		public static void ProcessLogFromMS(string message)
        {
			if (customLog != null)
			{
				string message_to = string.Format(message);
				customLog.WriteEntry(message_to);
			}
			else
			{
				throw new ArgumentException(string.Format("Error while trying to write event LogToIDSFromMS to event log."));
			}
		}



		public void Dispose()
		{
			if (customLog != null)
			{
				customLog.Dispose();
				customLog = null;
			}
		}
	}
}
